{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\nclass Workout{\n    date = new Date();\n    id = (Date.now() + \"\").slice(-10);\n    clicks = 0;\n\n    constructor(coords, distance, duration){\n        this.coords = coords; // [lat,lng]\n        this.distance = distance; // in km\n        this.duration = duration; // in min\n    }\n\n    _setDescription(){\n        // prettier-ignore\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', \n        'August', 'September', 'October', 'November', 'December'];\n\n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`;\n    }\n    \n    click(){\n        this.clicks++;\n    }\n}\n\nclass Running extends Workout{\n    type = \"running\";\n    constructor(coords, distance, duration, cadence){\n        super(coords, distance, duration);\n        this.cadence = cadence;\n        this.calcPace();\n        this._setDescription();\n    }\n    calcPace(){\n        // min/km\n        this.pace = this.duration/this.distance;\n       return this.pace; \n    }\n}\n\nclass Cycling extends Workout{\n    type = \"cycling\";\n    constructor(coords, distance, duration, elevationGain){\n        super(coords, distance, duration);\n        this.elevationGain = elevationGain;\n        this.calcSpeed();\n        this._setDescription();\n    }\n    calcSpeed(){\n     // km/h\n     this.speed = this.distance/ (this.duration/60); \n     return this.speed;\n    }\n}\n\n//////////////////////////////////\n//Application Architecture\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\n\nclass App{\n    #map;\n    #mapZoomLevel = 13;\n    #mapEvent;\n    #workouts = [];\n\n    constructor(){\n     // Get user's position   \n     this._getCurrentPosition();\n\n     // Get data from local storage\n     this._getLocalStorage();\n\n     //Attach event handlers\n     form.addEventListener(\"submit\", this._newWorkout.bind(this));\n\n    inputType.addEventListener(\"change\", this._toggleElevationField);\n    \n    containerWorkouts.addEventListener(\"click\", this._moveToPopup.bind(this));\n    }\n\n    _getCurrentPosition(){\n        if(navigator.geolocation)\n        navigator.geolocation.getCurrentPosition(this._loadMap.bind(this),\n              function(){\n                  alert(\"Request failed\");\n            });\n        }\n        \n    _loadMap(position){  \n     const {latitude, longitude} = position.coords;\n\n     let coords = [latitude, longitude]; \n     this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n     L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n     }).addTo(this.#map);\n\n     this.#map.on(\"click\", this._showForm.bind(this));\n\n     this.#workouts.forEach(work => {\n        this._renderWorkoutMarker(work);\n       })\n    }\n\n    _showForm(mapE){\n        this.#mapEvent = mapE;\n        form.classList.remove(\"hidden\");\n        inputDistance.focus();\n    }\n\n    _hideForm(){\n     //Empty Inputs\n     inputDistance.value = inputCadence.value = inputDuration.value = inputElevation.value  =  \"\";\n     form.style.display = \"none\";\n     form.classList.add('hidden');\n     setTimeout(() => (form.style.display = \"grid\"), 1000);\n    }\n\n    _toggleElevationField(){\n        inputElevation.closest(\".form__row\")\n        .classList.toggle(\"form__row--hidden\");\n\n        inputCadence.closest(\".form__row\")\n        .classList.toggle(\"form__row--hidden\");\n   \n    }\n\n    _newWorkout(e){\n    \n    const validInput = (...inputs) => \n      inputs.every(inp => Number.isFinite(inp));   \n         \n    const allPositive = (...inputs) => \n      inputs.every(inp => inp > 0); \n      \n     e.preventDefault();\n\n    //Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const {lat, lng} = this.#mapEvent.latlng;\n    let workout;\n\n    //If workout running, create running object\n    if(type === \"running\"){\n        const cadence = +inputCadence.value;\n\n        //Check if data is valid\n        if(\n            // !Number.isFinite(distance)||\n            // !Number.isFinite(duration)||\n            // !Number.isFinite(cadence)\n            !validInput(distance, duration, cadence) || \n            !allPositive(distance,duration,cadence)\n         )\n         return alert(\"Inputs have to br positive numbers\");\n\n         workout = new Running([lat,lng], distance, duration, cadence);\n    }\n\n    //If workout cycling, create cycling object\n\n    if(type === \"cycling\"){\n        const elevation = +inputElevation.value;\n        //Check if data is valid\n        if(\n            // !Number.isFinite(distance)||\n            // !Number.isFinite(duration)||\n            // !Number.isFinite(elevation)\n            !validInput(distance, duration, elevation) || \n            !allPositive(distance, duration)\n         )\n         return alert(\"Inputs have to br positive numbers\");\n\n         workout = new Cycling([lat,lng], distance, duration, elevation);\n    }\n\n    //Add new object to workouts array\n    this.#workouts.push(workout);\n    // console.log(this.#workouts);s\n\n    //Render workout on map as marker\n    this._renderWorkoutMarker(workout);   \n\n    //Render workout on list\n    this._renderWorkout(workout);\n\n     //Hide form + Clear input fields\n     this._hideForm();\n\n     //Set local storage to all workout\n     this._setLocalStorage();\n    }\n\n    _renderWorkoutMarker(workout){\n\n     //Display maker\n     L.marker(workout.coords)\n     .addTo(this.#map)\n     .bindPopup(\n     L.popup({\n     maxWidth: 250,\n     minWidth: 100,\n     autoClose: false,\n     closeOnClick: false,\n     className: `${workout.type}-popup`\n     })\n     )\n     .setPopupContent(`${workout.type === \"running\" ? '🏃‍♂️' : '🚴‍♂️'} ${workout.description}`)\n     .openPopup();\n    }\n\n    _renderWorkout(workout){\n        let html = `\n        <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${\n            workout.type === \"running\" ? '🏃‍♂️' : '🚴‍♂️'\n        }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>`;\n\n        if(workout.type === \"running\")\n          html += `\n          <div class=\"workout__details\">\n           <span class=\"workout__icon\">⚡️</span>\n           <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n           <span class=\"workout__unit\">min/km</span>\n          </div>\n          <div class=\"workout__details\">\n           <span class=\"workout__icon\">🦶🏼</span>\n           <span class=\"workout__value\">${workout.cadence}</span>\n           <span class=\"workout__unit\">spm</span>\n          </div>\n          </li>\n          `\n\n        if(workout.type === \"cycling\")\n          html += `\n          <div class=\"workout__details\">\n           <span class=\"workout__icon\">⚡️</span>\n           <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n           <span class=\"workout__unit\">km/h</span>\n          </div>\n          <div class=\"workout__details\">\n           <span class=\"workout__icon\">⛰</span>\n           <span class=\"workout__value\">${workout.elevationGain}</span>\n           <span class=\"workout__unit\">m</span>\n          </div>\n         </li>\n          `;\n\n        form.insertAdjacentHTML(\"afterend\", html);\n    };\n\n    _moveToPopup(e){\n        const workoutEl = e.target.closest(\".workout\");\n        if(!workoutEl) return;\n        const workout = this.#workouts.find(el => el.id === workoutEl.dataset.id);\n\n       this.#map.setView(workout.coords, this.#mapZoomLevel, {\n        // To give jumping effect from one location to another\n        animate: true,\n        pan: {\n            //Time taken to move from one location to another\n            duration: 1,\n        }\n       });\n\n       //using the public interface\n    //    workout.click();\n    }\n\n    _setLocalStorage(){\n        localStorage.setItem(\"workouts\", JSON.stringify(this.#workouts));\n\n    }\n\n    _getLocalStorage(){\n       const data = JSON.parse(localStorage.getItem(\"workouts\"));\n\n       if(!data) return;\n\n       this.#workouts = data;\n\n       this.#workouts.forEach(work => {\n        this._renderWorkout(work);\n       })\n    };\n\n    //Call this metohd in console as app.reset() to delete all the data from localStorage\n    reset(){\n        localStorage.removeItem(\"workouts\");\n    }\n\n};\n\nconst app = new App();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["Workout","date","Date","id","now","slice","clicks","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDate","click","Running","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","map","mapZoomLevel","mapEvent","workouts","_getCurrentPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","validInput","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","workout","elevation","push","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","el","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem","app"],"version":3,"file":"index.7fac58bb.js.map"}